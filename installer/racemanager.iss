; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
; For Docs see - https://jrsoftware.org/ishelp/index.php

#define MyAppName "Race Manager"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "Chad Auld & Brandon Imhoff"
#define MyAppURL "https://github.com/cauld/race_mgr"
#define MyAppExeName "RaceManager.exe"


[Registry]
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName:"RM_GAMESERVER_HOST"; ValueData:"{code:GetRmGameserverHost}"; Flags: preservestringtype
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName:"RM_GAMESERVER_PORT"; ValueData:"{code:GetRmGameserverPort}"; Flags: preservestringtype
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName:"RM_PATH_TO_DEDICATED_SERVER"; ValueData:"{code:GetRmPathToDedicatedServer}"; Flags: preservestringtype
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName:"RM_MONGO_HOST"; ValueData:"{code:GetMongoHost}"; Flags: preservestringtype
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName:"RM_MONGO_PORT"; ValueData:"{code:GetMongoPort}"; Flags: preservestringtype
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName:"RM_MONGO_USER"; ValueData:"{code:GetMongoUser}"; Flags: preservestringtype
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName:"RM_MONGO_PASS"; ValueData:"{code:GetMongoPass}"; Flags: preservestringtype
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName:"RM_ADMIN_USER"; ValueData:"{code:GetRmAdminUser}"; Flags: preservestringtype
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName:"RM_ADMIN_PASSWORD"; ValueData:"{code:GetRmAdminPass}"; Flags: preservestringtype
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName:"RM_JWT_SECRET"; ValueData:"{code:GetRmSecret}"; Flags: preservestringtype

[Code]
// Wizard pages
var GameserverInputsPage: TInputQueryWizardPage;
var MongoInputsPage: TInputQueryWizardPage;
var RaceManagerInputsPage: TInputQueryWizardPage;

// General functions
function GetRandomString(StringLen:Integer):String;
var str:String;
begin
    // All possible chars
    str := 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';
    Result := '';
    repeat
        Result := Result+str[Random(Length(str))+1];
    until(Length(Result)=StringLen)
end;

// Screen variable functions
function GetRmGameserverHost(Param: string): string;
begin
  Result := GameserverInputsPage.Values[0];
end;

function GetRmGameServerPort(Param: string): string;
begin
  Result := GameserverInputsPage.Values[1];
end;

function GetRmPathToDedicatedServer(Param: string): string;
begin
  Result := GameserverInputsPage.Values[2];
end;

function GetMongoHost(Param: string): string;
begin
  Result := MongoInputsPage.Values[0];
end;

function GetMongoPort(Param: string): string;
begin
  Result := MongoInputsPage.Values[1];
end;

function GetMongoUser(Param: string): string;
begin
  Result := MongoInputsPage.Values[2];
end;

function GetMongoPass(Param: string): string;
begin
  Result := MongoInputsPage.Values[3];
end;

function GetRmAdminUser(Param: string): string;
begin
  Result := RaceManagerInputsPage.Values[0];
end;

function GetRmAdminPass(Param: string): string;
begin
  Result := RaceManagerInputsPage.Values[1];
end;

function GetRmSecret(Param: string): string;
begin
  Result := GetRandomString(64);
end;

// Install wizard initialization
procedure InitializeWizard;
begin
  { Create the Gameserver inputs page }
  GameserverInputsPage :=
    CreateInputQueryPage(wpWelcome,
      'System information', 'Race Manager Configuration',
      'Please specify the following Automobilista 2 Dedicated Server information, then click Next (values are required for all fields)');

  { Add Gameserver input items (False means it's not a password input) }
  GameserverInputsPage.Add('AM2 Gameserver Hostname (*):', False);
  GameserverInputsPage.Add('AM2 Gameserver Port (*):', False);
  GameserverInputsPage.Add('Path to AM2 Dedicated Server Installation (*):', False);

  { Set some default/suggested Gameserver values }
  GameserverInputsPage.Values[0] := ExpandConstant('localhost');
  GameserverInputsPage.Values[1] := ExpandConstant('9000');
  GameserverInputsPage.Values[2] := ExpandConstant('C:\Program Files (x86)\Steam\steamapps\common\Automobilista 2 - Dedicated Server');

  { Create the Mongo inputs page }
  MongoInputsPage := CreateInputQueryPage(GameserverInputsPage.ID,
    'System information',
    'Race Manager Configuration',
    'Please enter following data for MongoDB and click Next (values are required for all fields)');

  { Add Mongo input items }
  MongoInputsPage.Add('MongoDB Hostname (*):', False);
  MongoInputsPage.Add('MongoDB Port (*):', False);
  MongoInputsPage.Add('MongoDB Username (*):', False);
  MongoInputsPage.Add('MongoDB Password (*):', True);

  { Set some default/suggested Mongo values }
  MongoInputsPage.Values[0] := ExpandConstant('localhost');
  MongoInputsPage.Values[1] := ExpandConstant('27017');
  MongoInputsPage.Values[2] := ExpandConstant('racemgr');

  { Create the Mongo inputs page }
  RaceManagerInputsPage := CreateInputQueryPage(MongoInputsPage.ID,
    'System information',
    'Race Manager Configuration',
    'Please enter following data for Race Manager and click Next (values are required for all fields)');

  { Add Race Manager input items }
  RaceManagerInputsPage.Add('Race Manager Admin Username (*):', False);
  RaceManagerInputsPage.Add('Race Manager Admin Password (*):', True);

  { Set some default/suggested RM values }
  RaceManagerInputsPage.Values[0] := ExpandConstant('admin');
end;

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{02E9E501-9984-495C-B8DF-45C0882B04EB}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputDir=dist
OutputBaseFilename=RaceManager-Installer-{#MyAppVersion}
SetupIconFile=racemanager.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
; Tell Windows Explorer to reload the environment
ChangesEnvironment=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "..\target\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

; Would be nice to start right after install, but the env reload doesn't see to work until the installer exists
; [Run]
; Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: waituntilterminated postinstall skipifsilent